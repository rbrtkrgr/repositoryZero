name: Signed Commit Test

on:
  workflow_dispatch:

jobs:
  add-file:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: "main"
      - name: Make Change(s)
        run: |
          echo "testing2" >> newfile2.txt
          echo "testing3" >> newfile3.txt
          
      - name: Detect changed files
        id: changes
        run: |
          git config --global user.email "rbrtkrgr@icloud.com"
          git config --global user.name "rbrtkrgr"
          git add .

          CHANGED_FILES=$(git diff --staged --name-only | xargs)
          
          echo "Changed files: $CHANGED_FILES"
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
      - name: Prepare CreateCommitOnBranch payload
        id: prepare-payload
        run: |
          FILES=$(echo "${{ steps.changes.outputs.files }}" | tr " " "\n")

          # Initialize ADDITIONS as an empty JSON array
          ADDITIONS='[]'
          
          # Function to add a new JSON object to the ADDITIONS array
          add_to_additions() {
            local FILE=$1
            local CONTENT=$2
          
            # Construct the new JSON object
            NEW_ITEM=$(jq -n --compact-output --arg path "$FILE" --arg contents "$CONTENT" '{"path":$path,"contents":$contents}')
          
            # Append the new JSON object to the ADDITIONS array
            ADDITIONS=$(echo "$ADDITIONS" | jq --compact-output --argjson newItem "$NEW_ITEM" '. += [$newItem]')
          }

          for FILE in $FILES; do
            CONTENT=$(cat "$FILE" | base64 | tr -d '\n')
            add_to_additions "$FILE" "$CONTENT"
          done

          echo "Additions: $ADDITIONS"

          echo "additions=$ADDITIONS" >> $GITHUB_OUTPUT

      - name: Get the latest commit SHA
        id: get-sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        
      - name: Add File and Commit
        run: |
          export GH_TOKEN=${{secrets.PAT}}
        
          REPO=${{github.repository}}
          BRANCH=${{github.ref_name}}
          MESSAGE="Adding newfile2.txt and newfile3.txt"
          PARENT_COMMIT_SHA=${{steps.get-sha.outputs.sha}}
          ADDITIONS=${{steps.prepare-payload.outputs.additions}}

          echo "Additions: $ADDITIONS"
          
          jq --null-input -c \
           --argjson additions "$ADDITIONS" \
           '$additions' |\
            sed -E 's/"([a-zA-Z0-9_]+)":/\1:/g' \
           > additions.gql

          echo "Here is the additions gql"
          cat additions.gql
          echo "Did you see anything?"


          # now that `sed` has stripped quotes from keys, I can substitute into a query
          cat <<EOF > mutation.gql
          mutation(
            \$branch: String!
            \$message: String!
            \$repo: String!
            \$sha: GitObjectID!
          ) {
            createCommitOnBranch(
              input: {
                branch: {
                  repositoryNameWithOwner: \$repo,
                  branchName: \$branch
                },
                expectedHeadOid: \$sha,
                fileChanges: {
                  additions: $(cat additions.gql)
                }
                message: {
                  headline: \$message
                }
             }
            ) {
              commit {
                oid
              }
            }
          }
          EOF
          
          # and finally I can invoke the query with primitive variables
          gh api graphql \
             -F branch="$BRANCH" \
             -F repo="$REPO" \
             -F message="$MESSAGE" \
             -F sha="$PARENT_COMMIT_SHA"  \
             -F query=@mutation.gql
